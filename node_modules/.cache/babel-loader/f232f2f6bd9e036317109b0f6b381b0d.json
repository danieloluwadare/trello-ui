{"ast":null,"code":"import \"antd/es/spin/style\";\nimport _Spin from \"antd/es/spin\";\nimport \"antd/es/table/style\";\nimport _Table from \"antd/es/table\";\nimport \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport _classCallCheck from \"/Users/ddada/Documents/danpersonal/livejavaproject/trelloMaster/trello-ui/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ddada/Documents/danpersonal/livejavaproject/trelloMaster/trello-ui/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ddada/Documents/danpersonal/livejavaproject/trelloMaster/trello-ui/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ddada/Documents/danpersonal/livejavaproject/trelloMaster/trello-ui/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ddada/Documents/danpersonal/livejavaproject/trelloMaster/trello-ui/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport \"antd/es/select/style\";\nimport _Select from \"antd/es/select\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nvar _jsxFileName = \"/Users/ddada/Documents/danpersonal/livejavaproject/trelloMaster/trello-ui/src/pages/dashboard/dashboard.js\";\nimport React, { Component } from 'react';\nimport Header from '../../partials/header';\nimport Navbar from '../../partials/navbar';\nimport BreadCrumb from '../../partials/breadcrumb';\nimport { fetchAllUsers, unBlockUser, blockUser } from './dashboard-api';\nimport { tasks } from './dashboard-datasource';\nimport TaskForm from '../../common/TaskForm'; // import {hasAuthority} from  '../../utils/api-utils'\n\nvar FormItem = _Form.Item;\nvar Option = _Select.Option;\n\nvar DashboarPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DashboarPage, _Component);\n\n  function DashboarPage(props) {\n    var _this;\n\n    _classCallCheck(this, DashboarPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DashboarPage).call(this, props));\n\n    _this.getTaskStatus = function (status) {\n      var badge = {};\n\n      if (status == \"Completed\") {\n        badge = {\n          clazz: \"badge badge-success\",\n          display: \"Completed\"\n        };\n      } else if (status == \"pending\") {\n        badge = {\n          clazz: \"badge badge-info\",\n          display: \"Pending\"\n        };\n      } else if (status == \"started\") {\n        badge = {\n          clazz: \"badge badge-primary\",\n          display: \"Started\"\n        };\n      } else if (status == \"cancelled\") {\n        badge = {\n          clazz: \"badge badge-danger\",\n          display: \"Cancelled\"\n        };\n      }\n\n      return React.createElement(\"span\", {\n        className: badge.clazz,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, badge.display);\n    };\n\n    _this.getTableHeader = function () {\n      var columns = [{\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name'\n      }, {\n        title: 'Description',\n        dataIndex: 'description',\n        key: 'description'\n      }, {\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n        render: function render(status) {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84\n            },\n            __self: this\n          }, _this.getTaskStatus(status));\n        }\n      }, {\n        title: 'Date completed',\n        dataIndex: 'completionDate',\n        key: 'completionDate'\n      }];\n      return columns;\n    };\n\n    _this.getAllTask = function () {\n      _this.setState({\n        isloading: true\n      });\n\n      _this.setState({\n        tasks: tasks\n      });\n\n      _this.setState({\n        isloading: false\n      });\n    };\n\n    _this.state = {\n      tasks: [],\n      name: \"\",\n      description: \"\",\n      status: \"\",\n      completionDate: \"\",\n      isloading: true // this.onsubmitDrug = this.onsubmitDrug.bind(this);\n\n    };\n    return _this;\n  }\n\n  _createClass(DashboarPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getAllTask();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var bodystyle = {\n        background: \"#f1f2f7\",\n        display: \"table\",\n        fontFamily: \"'Open Sans' sans-serif !important\",\n        fontSize: \"16px\",\n        width: \"100%\"\n      };\n      return React.createElement(\"div\", {\n        style: bodystyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        class: \"right-panel \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }), React.createElement(BreadCrumb, {\n        menu: \"User\",\n        submenu: \" \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        class: \"content mt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"animated fadeIn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(_Form, {\n        layout: \"inline\",\n        onSubmit: this.handleSubmit,\n        className: \"signup-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(FormItem // label=\"Name\"\n      // validateStatus={this.state.name.validateStatus}\n      // help={this.state.name.errorMsg}\n      , {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(_Input, {\n        size: \"large\",\n        name: \"name\",\n        autoComplete: \"off\",\n        placeholder: \"Task Name name\",\n        value: this.state.name.value,\n        onChange: function onChange(event) {\n          return _this2.handleInputChange(event, _this2.validateInput);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      })), React.createElement(FormItem // label=\"Amount\"\n      // validateStatus={this.state.amount.validateStatus}\n      // help={this.state.amount.errorMsg}\n      , {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(_Input, {\n        size: \"large\",\n        name: \"amount\",\n        autoComplete: \"off\",\n        placeholder: \"Description\",\n        value: this.state.description.value,\n        onChange: function onChange(event) {\n          return _this2.handleInputChange(event, _this2.validateInput);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      })), React.createElement(FormItem // label=\"Alias\"\n      // validateStatus={this.state.alias.validateStatus}\n      // help={this.state.alias.errorMsg}\n      , {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(_Select, {\n        defaultValue: \"jack\",\n        style: {\n          width: 120\n        },\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(Option, {\n        value: \"jack\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \"Completed\"), React.createElement(Option, {\n        value: \"lucy\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \"Pending\"), React.createElement(Option, {\n        value: \"Yiminghe\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"Started\"), React.createElement(Option, {\n        value: \"Yiminghe\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \"Cancelled\"))), React.createElement(FormItem // label=\"Alias\"\n      // validateStatus={this.state.alias.validateStatus}\n      // help={this.state.alias.errorMsg}\n      , {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(_Input, {\n        size: \"large\",\n        name: \"Target Date\",\n        autoComplete: \"off\",\n        placeholder: \"completion Date\",\n        value: this.state.completionDate.value,\n        onChange: function onChange(event) {\n          return _this2.handleInputChange(event, _this2.validateInput);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      })), React.createElement(FormItem, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(_Button, {\n        type: \"primary\",\n        icon: \"search\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, \"Search\"))))), React.createElement(_Spin, {\n        spinning: this.state.isloading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        className: \"card-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, \"Data Table\"), React.createElement(\"span\", {\n        className: \"pull-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, React.createElement(_Button, {\n        type: \"primary\",\n        onClick: function onClick() {\n          _this2.setState({\n            visible: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, \"CreateTask\"), React.createElement(\"a\", {\n        onClick: function onClick() {\n          _this2.setState({\n            visible: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, React.createElement(_Icon, {\n        type: \"plus-circle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"card-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, React.createElement(_Table, {\n        columns: this.getTableHeader(),\n        dataSource: this.state.tasks,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"col-md-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(TaskForm, {\n        visible: this.state.visible,\n        close: function close() {\n          _this2.setState({\n            visible: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }))))))));\n    }\n  }]);\n\n  return DashboarPage;\n}(Component);\n\nexport default DashboarPage;","map":{"version":3,"sources":["/Users/ddada/Documents/danpersonal/livejavaproject/trelloMaster/trello-ui/src/pages/dashboard/dashboard.js"],"names":["React","Component","Header","Navbar","BreadCrumb","fetchAllUsers","unBlockUser","blockUser","tasks","TaskForm","FormItem","Item","Option","DashboarPage","props","getTaskStatus","status","badge","clazz","display","getTableHeader","columns","title","dataIndex","key","render","getAllTask","setState","isloading","state","name","description","completionDate","bodystyle","background","fontFamily","fontSize","width","handleSubmit","value","event","handleInputChange","validateInput","handleChange","visible"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Header from '../../partials/header';\nimport Navbar from '../../partials/navbar'\nimport BreadCrumb from '../../partials/breadcrumb'\nimport {fetchAllUsers,unBlockUser,blockUser} from './dashboard-api'\nimport{tasks} from './dashboard-datasource'\nimport TaskForm from '../../common/TaskForm'\n// import {hasAuthority} from  '../../utils/api-utils'\n\nimport {\n    Form,\n    Input,\n    Tooltip,\n    Icon,\n    Modal,\n    Select,\n    Button,\n    Row,\n    Col,\n    Spin,\n    notification,Popconfirm,Table, Divider, Tag \n  } from 'antd';\n\nconst FormItem = Form.Item;\nconst { Option } = Select;\nclass DashboarPage extends Component  {\n    constructor(props) {\n        super(props);\n        this.state={\n            tasks:[],\n            name:\"\",\n            description:\"\",\n            status:\"\",\n            completionDate:\"\",\n            isloading:true\n        }\n            // this.onsubmitDrug = this.onsubmitDrug.bind(this);\n\n    }\n\n    componentDidMount(){\n        this.getAllTask()\n    } \n\n    getTaskStatus = (status)=>{\n        let badge ={}\n        if(status==\"Completed\"){\n            badge = {clazz:\"badge badge-success\", display:\"Completed\"}\n        } \n        else if(status==\"pending\"){\n            badge = {clazz:\"badge badge-info\", display:\"Pending\"}\n        }\n        else if(status==\"started\"){\n            badge = {clazz:\"badge badge-primary\", display:\"Started\"}\n        }\n        else if(status==\"cancelled\"){\n            badge = {clazz:\"badge badge-danger\", display:\"Cancelled\"}\n        }  \n        return (\n            <span className={badge.clazz}>\n                {badge.display}\n            </span>\n        );                  \n    }\n\n    getTableHeader = ()=>{\n        \n        const columns = [\n            {\n              title: 'Name',\n              dataIndex: 'name',\n              key: 'name',\n            },\n            {\n                title: 'Description',\n                dataIndex: 'description',\n                key: 'description',\n            },\n            {\n                title: 'Status',\n                dataIndex: 'status',\n                key: 'status',\n                render: status => (\n                    <span>\n                        {this.getTaskStatus(status)}  \n                    </span>\n                  ),\n            },\n            {\n                title: 'Date completed',\n                dataIndex: 'completionDate',\n                key: 'completionDate',\n            },\n           \n\n          ];\n\n        return columns\n    }\n\n    \n    \n\n    getAllTask = () =>{\n        this.setState({isloading:true})\n        this.setState({tasks:tasks})\n        this.setState({isloading:false})\n    }\n\n\n\n  render() {\n    const bodystyle =  {\n        background: \"#f1f2f7\",\n        display: \"table\",\n        fontFamily: \"'Open Sans' sans-serif !important\",\n        fontSize: \"16px\",\n        width: \"100%\" }\n\n    return (\n        <div style={bodystyle}>\n        {/* <!-- Left Panel --> */}\n\n            <Navbar></Navbar>\n            {/* <!-- /#left-panel --> */}\n            {/* <!-- Left Panel --> */}\n\n            {/* <!-- Right Panel --> */}\n\n            <div  class=\"right-panel \">\n                <Header></Header>\n                {/* <!-- /header --> */}\n                {/* <!-- Header--> */}\n\n                <BreadCrumb menu=\"User\" submenu=\" \"></BreadCrumb>\n\n                <div class=\"content mt-3\">\n                    \n                    <div class=\"animated fadeIn\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <Form  layout=\"inline\"onSubmit={this.handleSubmit} className=\"signup-form\">\n                                    <FormItem\n                                        // label=\"Name\"\n                                        // validateStatus={this.state.name.validateStatus}\n                                        // help={this.state.name.errorMsg}\n                                        >\n                                        <Input\n                                            size=\"large\"\n                                            name=\"name\"\n                                            autoComplete=\"off\"\n                                            placeholder=\"Task Name name\"\n                                            value={this.state.name.value}\n                                            onChange={(event) => this.handleInputChange(event, this.validateInput)}/>\n                                    </FormItem>\n\n                                    <FormItem\n                                        // label=\"Amount\"\n                                        // validateStatus={this.state.amount.validateStatus}\n                                        // help={this.state.amount.errorMsg}\n                                        >\n                                        <Input\n                                            size=\"large\"\n                                            name=\"amount\"\n                                            autoComplete=\"off\"\n                                            placeholder=\"Description\"\n                                            value={this.state.description.value}\n                                            onChange={(event) => this.handleInputChange(event, this.validateInput)}/>\n                                    </FormItem>\n\n                                    <FormItem\n                                        // label=\"Alias\"\n                                        // validateStatus={this.state.alias.validateStatus}\n                                        // help={this.state.alias.errorMsg}\n                                        >\n                                        <Select defaultValue=\"jack\" style={{ width: 120 }} onChange={this.handleChange}>\n                                            <Option value=\"jack\">Completed</Option>\n                                            <Option value=\"lucy\">Pending</Option>\n                                            <Option value=\"Yiminghe\">Started</Option>\n                                            <Option value=\"Yiminghe\">Cancelled</Option>\n\n                                        </Select>\n                                        {/* <Input\n                                            size=\"large\"\n                                            name=\"alias\"\n                                            autoComplete=\"off\"\n                                            placeholder=\"status\"\n                                            value={this.state.status.value}\n                                            onChange={(event) => this.handleInputChange(event, this.validateInput)}/> */}\n                                    </FormItem>\n\n                                    <FormItem\n                                        // label=\"Alias\"\n                                        // validateStatus={this.state.alias.validateStatus}\n                                        // help={this.state.alias.errorMsg}\n                                        >\n                                        <Input\n                                            size=\"large\"\n                                            name=\"Target Date\"\n                                            autoComplete=\"off\"\n                                            placeholder=\"completion Date\"\n                                            value={this.state.completionDate.value}\n                                            onChange={(event) => this.handleInputChange(event, this.validateInput)}/>\n                                    </FormItem>\n\n                                    <FormItem>\n                                        <Button type=\"primary\" icon=\"search\">\n                                            Search\n                                        </Button>\n                                    </FormItem>\n                            \n                                </Form>\n                            </div>\n                            \n                        </div>\n                        <Spin spinning={this.state.isloading}>\n\n                            {/* Table for drugs */}\n                            <div class=\"row\">\n\n\n                            <div className=\"col-md-12\">\n                                <div className=\"card\">\n                                    <div className=\"card-header\">\n                                        <strong className=\"card-title\">Data Table</strong>\n                                        <span className=\"pull-right\">\n                                            {/* <button type=\"submit\" className=\"btn pull-right btn-primary btn-flat m-b-30 m-t-30\">Create</button> */}\n                                            <Button type=\"primary\" onClick={()=>{ this.setState({visible:true})}}>\n                                                 CreateTask\n                                            </Button>\n                                            <a onClick={()=>{ this.setState({visible:true})}}><Icon type=\"plus-circle\" /></a>\n                                        </span>\n                                    </div>\n                                    <div className=\"card-body\">\n                                        <Table columns={this.getTableHeader()} dataSource={this.state.tasks} />\n                                    </div>\n                                    \n                                </div>\n                            </div>\n\n                            <div className=\"col-md-12\">\n                                {/*TAskForm Modal  */}\n                                <TaskForm visible={this.state.visible} close={()=>{this.setState({visible:false})}}></TaskForm>\n                            </div>\n\n\n                        </div>\n\n                        </Spin>\n\n                    </div>\n                </div>\n                {/* <!-- .content --> */}\n            </div>\n            {/* <!-- /#right-panel --> */}\n\n            {/* <!-- Right Panel --> */}\n        </div>\n    );\n  }\n}\n\nexport default DashboarPage;\n"]},"metadata":{},"sourceType":"module"}